Braden Simpson
V00685500

Lab 2.

1. 
   My approach to part task 2 was to use a python script that tried to create a symbolic link from a file /tmp/XYZ to /etc/shadow and /etc/passwd, in the time window between access() and fwrite() are called in vulp.c
   This approach is simple, and works about 2% of times, however using the script to brute force this is easy.  Once able to write to /etc/passwd and /etc/shadow, you can write : 
   /etc/passwd: newuser:x:1000:1000:newuser,,,:/:/bin/bash
   /etc/shadow: newuser:$1$PCs.L$iFk20HKpjw7HcQZ9gYHtA/:15517:0:99999:7:::

this will create a user 'newuser' with a password 'password', which has admin rights.

2. The protection method of adding more calls to access() and open() makes it less likely to be cracked, but it is still possible.  I was not able to crack it after the modification.

3. The method of "Least privilege" is an effective one, if you place the seteuid to give non-root privileges before the delay, then enable the higher priviliges right before open() it will work and stop the effectiveness of the race condition attacks.
